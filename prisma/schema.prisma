datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  productId            String             @id @default(cuid())
  name                 String
  slug                 String             @unique
  description          String             @db.VarChar(10000)
  smallDescription     String
  weight               Int
  priceRange           String
  productCategoryId    String
  productSubCategoryId String
  stock                Int
  orderCount           Int                @default(0)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  wishlist             UserWishlist[]
  ProductImages        ProductImage[]
  CartItem             CartItem[]
  productReviews       ProductReview[]
  productCategory      ProductCategory    @relation(fields: [productCategoryId], references: [productCategoryId])
  productSubCategory   ProductSubCategory @relation(fields: [productSubCategoryId], references: [productSubCategoryId])

  @@index([name])
  @@index([productCategoryId])
  @@index([productSubCategoryId])
  @@map("products")
}

model ProductImage {
  productImageId String  @id @default(cuid())
  productId      String
  imageUrl       String
  publicUrl      String
  product        Product @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@map("productimages")
}

model ProductReview {
  productReviewId String   @id @default(cuid())
  productId       String
  userId          String
  review          String
  rating          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product         Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("productreviews")
}

model ProductCategory {
  productCategoryId    String               @id @default(cuid())
  name                 String               @unique
  slug                 String               @unique
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  productSubCategories ProductSubCategory[]
  products             Product[]

  @@index([name])
  @@map("productcategories")
}

model ProductSubCategory {
  productSubCategoryId String          @id @default(cuid())
  name                 String
  slug                 String          @unique
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  productCategoryId    String
  productCategory      ProductCategory @relation(fields: [productCategoryId], references: [productCategoryId])
  products             Product[]

  @@index([name])
  @@map("productsubcategories")
}


model Cart {
  cartId    String     @id @default(cuid())
  items     CartItem[]
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  status    String     @default("ORDER_DRAFT")
  order     Order?

  @@map("carts")
}

model CartItem {
  cartItemId    String  @id @default(cuid())
  productId     String
  product       Product @relation(fields: [productId], references: [productId], onDelete: Cascade)
  quantity      Int
  customization String
  cartId        String
  cart          Cart    @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  finalPrice    Int?

  @@map("cartitems")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             String          @id @default(cuid())
  username       String?
  name           String?
  gender         String?
  password       String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  phoneNumber    String?
  fullAddress    String?
  dateOfBirth    DateTime?
  about          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  scope          String?         @default("member")
  provinceId     String?
  cityId         String?
  province       Provinces?      @relation(fields: [provinceId], references: [provinceId])
  city           Cities?         @relation(fields: [cityId], references: [cityId])
  wishlist       UserWishlist[]
  productReviews ProductReview[]
  accounts       Account[]
  sessions       Session[]
  cart           Cart[]
  orders         Order[]
  invoices       Invoice[]

  @@map("users")
}

model UserWishlist {
  userWishlistId String   @id @default(cuid())
  userId         String
  productId      String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId, productId])
  @@map("userwishlists")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   @unique
  token      String   @unique
  expires    DateTime

  @@map("verificationtokens")
}

model Provinces {
  provinceId String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cities     Cities[]
  users      User[]

  @@map("provinces")
}

model Cities {
  cityId     String    @id @default(cuid())
  name       String
  provinceId String
  province   Provinces @relation(fields: [provinceId], references: [provinceId])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  users      User[]

  @@map("cities")
}

model Order {
  orderId         String   @id @default(cuid())
  userId          String
  cartId          String   @unique
  status          String
  shippingStatus  String
  shippingAddress String
  totalWeight     Int
  totalPrice      Int?
  estimated       DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cart           Cart            @relation(fields: [cartId], references: [cartId], onDelete: Cascade)
  invoice        Invoice?
  payments       Payment?

  @@index([userId, status])
  @@map("orders")
}

model Payment {
  paymentId        String   @id @default(cuid())
  orderId          String   @unique
  amount           Int
  paymentMethod    String
  transactionId    String?
  status           String
  snapToken        String?
  snapRedirectUrl  String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  order            Order    @relation(fields: [orderId], references: [orderId])

  @@index([orderId, status])
  @@map("payments")
}

model Invoice {
  invoiceId   String   @id @default(cuid())
  orderId     String   @unique
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Order    @relation(fields: [orderId], references: [orderId])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

